{"ast":null,"code":"var _jsxFileName = \"F:\\\\free2\\\\client\\\\src\\\\pages\\\\Payment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport gpayLogo from '../images/gpayLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRCodeComponent = () => {\n  _s();\n  const [qrCodeSrc, setQRCodeSrc] = useState('');\n  useEffect(() => {\n    const fetchQRCode = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/api/qrcode');\n        if (response.ok) {\n          const qrCodeData = await response.text();\n          setQRCodeSrc(qrCodeData);\n        } else {\n          console.error('Failed to fetch QR code');\n        }\n      } catch (error) {\n        console.error('Error fetching QR code:', error);\n      }\n    };\n    fetchQRCode();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: gpayLogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: qrCodeSrc\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(QRCodeComponent, \"+lLNKCbr5gZXqVkUX3oLzd1kXak=\");\n_c = QRCodeComponent;\nexport default QRCodeComponent;\nvar _c;\n$RefreshReg$(_c, \"QRCodeComponent\");","map":{"version":3,"names":["React","useState","useEffect","gpayLogo","jsxDEV","_jsxDEV","QRCodeComponent","_s","qrCodeSrc","setQRCodeSrc","fetchQRCode","response","fetch","ok","qrCodeData","text","console","error","children","src","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["F:/free2/client/src/pages/Payment.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport gpayLogo from '../images/gpayLogo.png';\r\nconst QRCodeComponent = () => {\r\n  const [qrCodeSrc, setQRCodeSrc] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchQRCode = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:4000/api/qrcode');\r\n        if (response.ok) {\r\n          const qrCodeData = await response.text();\r\n          setQRCodeSrc(qrCodeData);\r\n        } else {\r\n          console.error('Failed to fetch QR code');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching QR code:', error);\r\n      }\r\n    };\r\n\r\n    fetchQRCode();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <img src={gpayLogo} />\r\n      <div dangerouslySetInnerHTML={{ __html: qrCodeSrc }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCodeComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC9C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;QAChE,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,UAAU,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UACxCN,YAAY,CAACK,UAAU,CAAC;QAC1B,CAAC,MAAM;UACLE,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;QAC1C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDP,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAKc,GAAG,EAAEhB;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtBlB,OAAA;MAAKmB,uBAAuB,EAAE;QAAEC,MAAM,EAAEjB;MAAU;IAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV,CAAC;AAAChB,EAAA,CA3BID,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AA6BrB,eAAeA,eAAe;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}